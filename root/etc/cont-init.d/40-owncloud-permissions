#!/usr/bin/with-contenv bash

# To setup this script for your environment, adopt the following variables to your needs:
#
# ocname	the name of your directory containing the owncloud files
# ocroot	the path to ocname, usually /var/www (no trailing slash)
# linkroot	the path to your source directory for linking data and apps-external (no trailing slash)
# htuser	the webserver user
# htgroup	the webserver group
# rootuser	the root user

# Short description for paramters used in find
#
# -L       ... Follow symbolic links. Needed in case if links are used or present
# -path    ... The path to process
# -prune   ... If the file is a directory, do not descend into it (used to exclude directories)
# -o       ... OR (to add more parameters)
# -type    ... File is of type [d ... directory, f ... file]
# -print0  ... Print the full file name on the standard output, followed by a null character
# xargs -0 ... Reads items from the standard input, input items are terminated by a null character


ocname='owncloud'
ocroot='/var/www'
ocpath=${ocroot}/${ocname}
ocdata="/data"
ocapps_external="/apps"

htuser='www-data'
htgroup='www-data'
rootuser='root'

# Because the data directory can be huge or on external storage, an automatic chmod/chown can take a while.
# Therefore this directory can be treated differently.
# If you have already created an external "data" and "apps-external" directory which you want to link,
# set the paths above accordingly. This script can link and set the proper rights and permissions
# depending what you enter when running the script.

# When the instance is setup, either post a fresh install or, after an upgrade, run this script again - but
# only for securing ".htaccess files". This sets the appropriate ownership and permissions for them.

# In case you upgrade an existing installation, your original directory will be renamed, including a timestamp.

# Example input (without securing your .htaccess files)
# New install using mkdir:     n/n/n/n (create possible missing directories, setup permissions and ownership)
# Upgrade using mkdir:         y/n/n/n (you move/replace data, apps-external and config.php manually, set setup permissions and ownership)
# New install using links:     n/y/y/n (link existing directories, setup permissions and ownership)
# Upgrade using links:         y/y/n/y (link existing directories, copy config.php, permissions and ownership are already ok)
# Post installation/upgrade:   either n/n/n/n or n/y/y/n
# Reset all perm & own:        either n/n/n/n or n/y/y/n

STAGE="[INIT-STAGE2][OWNCLOUD-PERMS]"

echo "${STAGE} setting permissions"

if [ -n "$(ls -A $ocdata)" ]; then
  find -L ${ocdata}/ -type f -print0 | xargs -0 chmod 0640
fi

find -L ${ocdata}/ -type d -print0 | xargs -0 chmod 0750

if [ -n "$(ls -A $ocapps_external)" ]; then
  find -L ${ocapps_external}/ -type f -print0 | xargs -0 chmod 0640
fi

find -L ${ocapps_external}/ -type d -print0 | xargs -0 chmod 0750

#chown
printf "\nchown files and directories excluding data and apps-external directory \n"

find -L $ocpath -path ${ocdata} -prune -o -path ${ocapps_external} -prune -o -type d -print0 | xargs -r -0 chown -R ${rootuser}:${htgroup}
find -L $ocpath -path ${ocdata} -prune -o -path ${ocapps_external} -prune -o -type f -print0 | xargs -r -0 chown -R ${rootuser}:${htgroup}

# do only if directories are present
if [ -d ${ocpath}/apps/ ]; then
  printf "chown apps directory \n"
  chown -R ${htuser}:${htgroup} ${ocpath}/apps/
fi
if [ -d ${ocpath}/config/ ]; then
  printf "chown config directory \n"
  chown -R ${htuser}:${htgroup} ${ocpath}/config/
fi
if [ -d ${ocpath}/updater/ ]; then
  printf "chown updater directory \n"
  chown -R ${htuser}:${htgroup} ${ocpath}/updater
fi

if [ -d ${ocpath}/apps-external ] && [ -d ${ocpath}/data ]; then
  printf "chown data and apps-external directories (linked) \n"
  chown -R ${htuser}:${htgroup} ${ocapps_external}/
  chown -R ${htuser}:${htgroup} ${ocdata}/
fi

printf "\nchmod occ command to make it executable \n"
if [ -f ${ocpath}/occ ]; then
  chmod +x ${ocpath}/occ
fi
